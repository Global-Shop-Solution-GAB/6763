Program.Sub.Preflight.Start
v.Global.sPath.Declare(String)
v.Global.sError.Declare(String)

Program.Sub.Preflight.End

Program.Sub.Main.Start
'Author: Arturo Almaguer
'Date: 19th May 2022
'Customer: SHIELD INDUSTRIES, quote number 13435
'This program sends an email to the contact set up in the New Shipments screen whenever a new shipment is being saved.
'This script is launched off both 28530 New Shipments Pre Save hook and 28532 New Shipments Post Save hook

Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout

F.Intrinsic.Control.Try

	V.Local.sPackingList.Declare(String)
	V.Local.sContactName.Declare(String)
	V.Local.sContactEmail.Declare(String)
	V.Local.sFile.Declare(String)
	V.Local.bExists.Declare(Boolean)
	V.Local.sText.Declare(String)
	V.Local.sSubject.Declare(String)
	V.Local.sBody.Declare(String)
	V.Local.sSQL.Declare(String)
	V.Local.sCustPO.Declare(String)
	V.Local.sShipVia.Declare(String)
	V.Local.sTrackingNo.Declare(String)
	V.Local.iReturn.Declare(Long)
	
	'Setting up the key variables
	F.Intrinsic.String.LPad(V.Passed.000168, "0", 7, V.Local.sPackingList)
	V.Local.sContactName.Set(V.Passed.000360)
	V.Local.sContactEmail.Set(V.Passed.000367)
	
	F.Intrinsic.Control.SelectCase(V.Caller.Hook)
		
		F.Intrinsic.Control.Case(28530)
		'New Shipments Pre Save hook
		
			F.Intrinsic.Control.If(V.Local.sContactEmail,=,"", "OR", V.Local.sContactName,=,"")
			
				'Displaying a message to user if either the Contact Name or Email fields are blank.
				F.Intrinsic.UI.Msgbox("Contact information is not filled in. Would you like to continue and not the send packing list per email?","ARC 6763", V.Enum.MsgBoxStyle!YesNo, V.Local.iReturn) 
				F.Intrinsic.Control.If(V.Local.iReturn,=,V.Enum.MsgBoxResult!No)
					'Cancelling save process to allow the user to add the missing information.
					V.Passed.777777.Set(1)
				F.Intrinsic.Control.EndIf
		
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Case(28532)
		'New Shipments Post Save hook
		
			F.Intrinsic.Control.If(V.Local.sContactEmail,<>,"", "AND", V.Local.sContactName,<>,"")
				
				'Calling subroutines to create temporary folder to store the packing list and to save packing list into the folder.
				F.Intrinsic.Control.CallSub("CheckTempDir")
				F.Intrinsic.UI.Sleep(5)
				F.Intrinsic.Control.CallSub("SaveReport", "PCK_NO", V.Local.sPackingList)
				
				'Validating whether default email txt file exists
				F.Intrinsic.String.Build("{0}\GCG_6763_DefaultEmail.txt", V.Caller.GasDir, V.Local.sFile)
				F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
				
				F.Intrinsic.Control.If(V.Local.bExists,=,True)
					
					'Retrieving default text 
					F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sText)
					
					'Getting wildcard variables values
					f.ODBC.Connection!Con.OpenCompanyConnection
					F.Intrinsic.String.Build("select top 1 CUSTOMER_PO, SHIP_VIA, TRACKING_NO from BI_PACKING_LIST where TERMINAL = '{0}' and PCK_NO = '{1}';", V.Caller.Terminal, V.Local.sPackingList, V.Local.sSQL)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sSQL)
					F.ODBC.Connection!Con.Close
					
					F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF, =, False)
						
						'Splitting and setting variables
						F.Intrinsic.String.Split(V.Local.sSQL, "*!*", V.Local.sSQL)
						v.Local.sCustPO.Set(V.Local.sSQL(0))
						v.Local.sShipVia.Set(V.Local.sSQL(1))
						v.Local.sTrackingNo.Set(V.Local.sSQL(2))
						
						'Replacing all wildcard variables with the actual value
						F.Intrinsic.String.Replace(V.Local.sText,"%PACKINGLIST%",V.Local.sPackingList,V.Local.sText)
						F.Intrinsic.String.Replace(V.Local.sText,"%CUSTOMERPO%",V.Local.sCustPO,V.Local.sText)
						F.Intrinsic.String.Replace(V.Local.sText,"%CONTACTNAME%",V.Local.sContactName,V.Local.sText)
						F.Intrinsic.String.Replace(V.Local.sText,"%SHIPVIA%",V.Local.sShipVia,V.Local.sText)
						F.Intrinsic.String.Replace(V.Local.sText,"%TRACKINGNUMBER%",v.Local.sTrackingNo,V.Local.sText)
						F.Intrinsic.String.Split(V.Local.sText, "*!*", V.Local.sText)
						
						'Setting the email's subject and body variables
						V.Local.sSubject.Set(V.Local.sText(0))
						F.Intrinsic.String.Build("{0}{1}{2}{3}", V.Local.sText(1), V.Local.sText(2), V.Local.sText(3), V.Local.sText(4), V.Local.sBody)
						
						'Calling subroutine to queue email in courier table
						F.Intrinsic.Control.CallSub("QueueEmail", "Subject", V.Local.sSubject, "Body", V.Local.sBody, "Email", V.Local.sContactEmail, "Name", V.Local.sContactName) 
						
					F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.EndSelect
	
F.Intrinsic.Control.Catch

	F.Intrinsic.Control.CallSub(CatchError)
	
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.CheckTempDir.Start
'This subroutine validates whether this new temporary directory exists, creates if it doesn't.

F.Intrinsic.Control.Try

	V.Local.sPath.Declare(String)
	V.Local.bExists.Declare(Boolean)
	
	F.Intrinsic.String.Build("{0}\6763", V.Caller.DocDir, V.Local.sPath)
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
	
		'Creates directory if it doesn't exist
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	
	F.Intrinsic.Control.EndIf
	
	'Setting global variable for the path
	v.Global.sPath.Set(V.Local.sPath)

F.Intrinsic.Control.Catch

	F.Intrinsic.Control.CallSub(CatchError)
	
F.Intrinsic.Control.EndTry
Program.Sub.CheckTempDir.End

Program.Sub.SaveReport.Start
'This subroutine saves the packing list as PDF in the temp director.
'V.Args.PCK_NO = Packing List No

F.Intrinsic.Control.Try

	V.Local.sPN.Declare(String)
	V.Local.sPV.Declare(String)
	V.Local.sSavePath.Declare(String)
	V.Local.sLogo.Declare(String)
	
	'Building parameters names
	f.Intrinsic.String.Split("Terminal*!*REPORTID*!*PCKNO*!*Logo","*!*",V.Local.sPN)
	
	'Validating the customer's logo path
	f.ODBC.Connection!Con.OpenCompanyConnection
	F.ODBC.Connection!Con.ExecuteAndReturn("select RTRIM(TEXT1) TEXT1 from V_OP_HEADER where ID = '401046';", V.Local.sLogo)
	F.ODBC.Connection!Con.Close
	
	'If there is a logo set up, then use it. Passed as blank if there were no returned
	F.Intrinsic.Control.If(V.Local.sLogo, <>, "")
		F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}", V.Caller.Terminal, "000051", "Y", V.Local.sLogo, V.Local.sPV)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}", V.Caller.Terminal, "000051", "Y", "", V.Local.sPV)
	F.Intrinsic.Control.EndIf
	
	'Building parameters values
	F.Intrinsic.String.Split(v.Local.sPV,"*!*",v.Local.sPV)
	
	'Building the save path
	f.Intrinsic.String.Build("{0}\Packing List_{1}.PDF", V.Global.sPath, V.Args.PCK_NO, V.Local.sSavePath)

	'Saving report. It should be running asynchronous.
	F.Global.BI.SaveReport("000051", 1, V.Local.sPN, V.Local.sPV, V.Local.sSavePath)

F.Intrinsic.Control.Catch

	F.Intrinsic.Control.CallSub(CatchError)
	
F.Intrinsic.Control.EndTry

Program.Sub.SaveReport.End

Program.Sub.QueueEmail.Start
'This subroutine queues the email so it can be later sent by Courier.
'V.Args.Subject = Email's subject, V.Args.Body = Email's body, V.Args.Email = Contact email, V.Args.Name = contact name

F.Intrinsic.Control.Try

	V.Local.iUserID.Declare(Long)
	V.Local.sSender.Declare(String)
	V.Local.sSenderEmail.Declare(String)
	V.Local.sSenderName.Declare(String)
	V.Local.sSubject.Declare(String)
	V.Local.sBody.Declare(String)
	V.Local.sRecipient.Declare(String)
	V.Local.sFilePath.Declare(String)
	V.Local.sFinalPath.Declare(String)
	V.Local.sAttachment.Declare(String)
	
	'Getting User ID
	F.Global.Security.GetUserID(V.Caller.User, V.Caller.CompanyCode, V.Local.iUserID)
	
	'Setting Subject
	V.Local.sSubject.Set(V.Args.Subject)

	'''Building sender parameter
	'Get email address of GS User
	F.Global.Security.GetUserEmail(V.Caller.User, V.Local.sSenderEmail)
	
	'Alert and end script if no email found for GS User
	F.Intrinsic.control.If(V.Local.sSenderEmail,=,"")
		F.Intrinsic.UI.Msgbox("Error in email procedure.  The GS User does not have an email address associated with it in User Security Maintenance.")
		F.Intrinsic.Control.CallSub("FormEmail_UnLoad")
	F.Intrinsic.Control.EndIf
	
	'Getting full name of GS User
	F.Global.Security.GetFullName(V.Caller.User, V.Caller.CompanyCode, V.Local.sSenderName)
	
	'Settin Sender Info for Queue Message
	f.Intrinsic.String.Concat(V.Local.sSenderEmail,"*!*", V.Local.sSenderName, V.Local.sSender)
	'''
	
	'Building recipients parameter
	F.Intrinsic.String.Build("{0}*!*{1}", V.Args.Name, V.Args.Email, V.Local.sRecipient)
	
	'Setting Body
	V.Local.sBody.Set(V.Args.Body)
	
	'Getting Packing List to attach it to the email
	F.Intrinsic.String.Build("{0}\", v.Global.sPath, V.Local.sFilePath)
	F.Intrinsic.File.GetFileList(v.Local.sFilePath, "", V.Local.sAttachment)
	F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sAttachment, V.Local.sFilePath, V.Local.sFinalPath)
	
	'Creating message, which will be sent by courier. 
	F.Global.Messaging.QueueMessage(V.Caller.CompanyCode,V.Local.iUserID,"GCG_6763",V.Local.sSubject,V.Local.sSender, V.Local.sRecipient, V.Local.sBody,5,"",False,"","","","","","","", V.Local.sFinalPath, True, "")

F.Intrinsic.Control.Catch

	F.Intrinsic.Control.CallSub(CatchError)
	
F.Intrinsic.Control.EndTry
Program.Sub.QueueEmail.End

Program.Sub.CatchError.Start
'To display the error
F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Ambient.ScriptPath, V.Ambient.Newline, V.Ambient.SubroutineCalledFrom, V.Ambient.ErrorNumber, V.Ambient.ErrorDescription, V.Ambient.GABVersion, V.Global.sError) 
F.Intrinsic.UI.Msgbox(V.Global.sError)
F.Intrinsic.Control.CallSub("Unload")
Program.Sub.CatchError.End

Program.Sub.Unload.Start
'Closes the connection if it is open
f.Intrinsic.Control.If(v.ODBC.con.exists,=,"1") 	
    f.ODBC.Connection!Con.Close
f.Intrinsic.Control.EndIf

'Ending program
F.Intrinsic.Control.End
Program.Sub.Unload.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$apadilla$}$20220608112201749$}$Lag9STqBJOmNXSbd5+msRcBWPGz0aFqSzPePUG9qWbyI40EU7yNfxWlMpp1RIES0qRV/UV0HjZSmFdU/kinqow==
Program.Sub.Comments.End